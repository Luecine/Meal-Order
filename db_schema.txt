CREATE TABLE ACCOUNT
(
	userId                VARCHAR(20)  NOT NULL ,
	name                  VARCHAR(20)  NULL ,
	userPw                VARCHAR(20)  NOT NULL ,
	userNum               INT  NOT NULL auto_increment,
	

    primary key (userId, userNum),
	unique(userNum)
);


CREATE TABLE FINANCE
(
	date                  DATE  NULL ,
	totalProfit           LONG  NULL
);


CREATE TABLE HISTORY
(
	userId                VARCHAR(20)  NOT NULL ,
	userNum               INT  NOT NULL ,
	historyNum	 INT NOT NULL,
	date                  DATE  NULL ,

    primary key(userId, userNum, historyNum),
    constraint idConstraint foreign key(userId, userNum) references ACCOUNT(userId, userNum) on delete cascade
);

CREATE TABLE CART
(
	cartNum              INT  NOT NULL ,
	totalPrice           INT  NULL ,
	userId                VARCHAR(20)  NOT NULL ,
	userNum               INT  NOT NULL,
    primary key(cartNum)
    
);



CREATE TABLE ITEM
(
	name                  VARCHAR(20)  NOT NULL ,
	price                 INT  NOT NULL ,
	itemNum               INT  NOT NULL ,

    primary key(itemNum)
);

CREATE TABLE ORDER_ITEM_Detail
(
	cartNum              INT  NOT NULL ,
	itemNum              INT  NOT NULL ,
	count                INT  NOT NULL ,

    primary key(cartNum, itemNum),
    constraint cartConstraint foreign key (cartNum) references CART(cartNum),
    constraint itemConstraint foreign key(itemNum) references ITEM(itemNum)
);

alter table CART
add constraint itemNumConstraint 
foreign key(itemNum) references ORDER_ITEM_Detail(itemNum);


CREATE TABLE REVIEW
(
	reviewNum             INT NOT NULL ,
	userId                VARCHAR(20)  NOT NULL ,
	userNum               INT  NOT NULL ,
	historyNum	 INT NOT NULL,
	content               VARCHAR(100)  NOT NULL ,
	date                  DATE  NULL ,
	rate                  INT  NULL,

    primary key(reviewNum, userId, userNum, historyNum),
    constraint reviewConstraint foreign key(userId, userNum, historyNum) references HISTORY(userId, userNum, historyNum) on delete cascade
);

INSERT INTO account (userId, name, userPw, userNum) VALUES
(
	"tollea1234",
	"Kim",
	"1234",
	1
);


CREATE TABLE Manager
(
	managerId                VARCHAR(20)  NOT NULL ,
	name              		 VARCHAR(20)  NULL ,
	managerPw                VARCHAR(20)  NOT NULL ,
	managerNum               INT  NOT NULL auto_increment,

    primary key (managerId, managerNum),
	unique(managerNum)
);




INSERT INTO Manager (managerId, name, managerPw) VALUES
(
	"skyss123",
	"Lee",
	"qwer"
)

CREATE table temp_history (
       userId      VARCHAR(20),
       date        TEXT,
       content      VARCHAR(100),
       totalPrice    INT,
        restaurantId TEXT);


CREATE table temp_review (
      resBlock      TEXT,
      userId      VARCHAR(20),
       rate    INT,
       comment    VARCHAR(100)
	   
);

create table temp_cart(name varchar(20), price int, number int);


/* 아이템 테이블 */
INSERT INTO item (name, price, itemNum) VALUE ('chicken', 18000, 1);
INSERT INTO item (name, price, itemNum) VALUE ('pizza', 23000, 2);

/*account 테이블 */
INSERT INTO ACCOUNT (userId, name, userPw, userNum, isManager) VALUE ('firstid', 'seonwu', '1234', 1, false);
INSERT INTO ACCOUNT (userId, name, userPw, userNum, isManager) VALUE ('secondid', 'minsu', '1234', 2, false);

/*history */
INSERT INTO HISTORY (userId, userNum, historyNum, date) VALUE ('firstid', 1, 1, NOW());
INSERT INTO HISTORY (userId, userNum, historyNum, date) VALUE ('firstid', 1, 2, NOW());
INSERT INTO HISTORY (userId, userNum, historyNum, date) VALUE ('firstid', 1, 3, NOW());
INSERT INTO HISTORY (userId, userNum, historyNum, date) VALUE ('secondid', 2, 4, NOW());

/*CART*/ 
INSERT INTO CART (cartNum, totalPrice, userId, userNum) VALUE (1, 41000, 'firstid', 1);

/*order_item_detail*/
INSERT INTO ORDER_ITEM_DETAIL (cartNum, itemNum, count) VALUE (1, 1, 1);
INSERT INTO ORDER_ITEM_DETAIL (cartNum, itemNum, count) VALUE (1, 2, 1);

/*review */
INSERT INTO REVIEW (reviewNum, userId, userNum, historyNum, content, date, rate) VALUE (1,'firstid', 1, 1, 'Terrible', NOW(), 1);
INSERT INTO REVIEW (reviewNum, userId, userNum, historyNum, content, date, rate) VALUE (2,'firstid', 1, 2, 'Yum', NOW(), 5);
INSERT INTO REVIEW (reviewNum, userId, userNum, historyNum, content, date, rate) VALUE (3,'secondid', 2, 4, 'Holy shit', NOW(), 10);