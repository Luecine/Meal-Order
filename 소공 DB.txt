
CREATE TABLE ACCOUNT
(
	userId                VARCHAR(20)  NOT NULL ,
	name                  VARCHAR(20)  NULL ,
	userPw                VARCHAR(20)  NOT NULL ,
	userNum               NUMBER  NOT NULL ,
	isManager             CHAR(1)  NOT NULL 
);



CREATE UNIQUE INDEX XPKACCOUNT ON ACCOUNT
(userId  ASC,userNum  ASC);



ALTER TABLE ACCOUNT
	ADD CONSTRAINT  XPKACCOUNT PRIMARY KEY (userId,userNum);



CREATE TABLE FINANCE
(
	date                  DATE  NULL ,
	totalProfit           NUMBER  NULL 
);



CREATE TABLE HISTORY
(
	userId                VARCHAR(20)  NOT NULL ,
	userNum               NUMBER  NOT NULL ,
	date                  DATE  NULL 
);



CREATE UNIQUE INDEX XPKHISTORY ON HISTORY
(userId  ASC,userNum  ASC);



ALTER TABLE HISTORY
	ADD CONSTRAINT  XPKHISTORY PRIMARY KEY (userId,userNum);



CREATE TABLE ITEM
(
	name                  VARCHAR(20)  NOT NULL ,
	price                 NUMBER  NOT NULL ,
	ItemNum               NUMBER  NOT NULL 
);



CREATE UNIQUE INDEX XPKITEM ON ITEM
(ItemNum  ASC);



ALTER TABLE ITEM
	ADD CONSTRAINT  XPKITEM PRIMARY KEY (ItemNum);



CREATE TABLE ORDER
(
	OrderNum              NUMBER  NOT NULL ,
	totalPrice            NUMBER  NULL ,
	detailNum             NUMBER  NULL ,
	userId                VARCHAR(20)  NOT NULL ,
	userNum               NUMBER  NOT NULL 
);



CREATE UNIQUE INDEX XPKORDER ON ORDER
(OrderNum  ASC);



ALTER TABLE ORDER
	ADD CONSTRAINT  XPKORDER PRIMARY KEY (OrderNum);



CREATE TABLE ORDER_ITEM_Detail
(
	OrderNum              NUMBER  NOT NULL ,
	ItemNum               NUMBER  NOT NULL ,
	count                 NUMBER  NOT NULL 
);



CREATE UNIQUE INDEX XPKORDER_ITEM_Detail ON ORDER_ITEM_Detail
(OrderNum  ASC,ItemNum  ASC);



ALTER TABLE ORDER_ITEM_Detail
	ADD CONSTRAINT  XPKORDER_ITEM_Detail PRIMARY KEY (OrderNum,ItemNum);



CREATE TABLE REVIEW
(
	reviewNum             NUMBER  NOT NULL ,
	userId                VARCHAR(20)  NOT NULL ,
	userNum               NUMBER  NOT NULL ,
	content               VARCHAR(100)  NOT NULL ,
	date                  DATE  NULL ,
	rate                  NUMBER  NULL 
);



CREATE UNIQUE INDEX XPKREVIEW ON REVIEW
(reviewNum  ASC,userId  ASC,userNum  ASC);



ALTER TABLE REVIEW
	ADD CONSTRAINT  XPKREVIEW PRIMARY KEY (reviewNum,userId,userNum);



ALTER TABLE HISTORY
	ADD (CONSTRAINT  R_2 FOREIGN KEY (userId,userNum) REFERENCES ACCOUNT(userId,userNum));



ALTER TABLE ORDER
	ADD (CONSTRAINT  R_13 FOREIGN KEY (userId,userNum) REFERENCES HISTORY(userId,userNum) ON DELETE SET NULL);



ALTER TABLE ORDER_ITEM_Detail
	ADD (CONSTRAINT  R_8 FOREIGN KEY (OrderNum) REFERENCES ORDER(OrderNum));



ALTER TABLE ORDER_ITEM_Detail
	ADD (CONSTRAINT  R_10 FOREIGN KEY (ItemNum) REFERENCES ITEM(ItemNum));



ALTER TABLE REVIEW
	ADD (CONSTRAINT  R_3 FOREIGN KEY (userId,userNum) REFERENCES HISTORY(userId,userNum));



CREATE  TRIGGER tD_ACCOUNT AFTER DELETE ON ACCOUNT for each row
-- ERwin Builtin Fri Nov 13 17:59:50 2020
-- DELETE trigger on ACCOUNT 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
    /* ACCOUNT  HISTORY on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0000eabc", PARENT_OWNER="", PARENT_TABLE="ACCOUNT"
    CHILD_OWNER="", CHILD_TABLE="HISTORY"
    P2C_VERB_PHRASE="R/2", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2", FK_COLUMNS="userId""userNum" */
    SELECT count(*) INTO NUMROWS
      FROM HISTORY
      WHERE
        /*  %JoinFKPK(HISTORY,:%Old," = "," AND") */
        HISTORY.userId = :old.userId AND
        HISTORY.userNum = :old.userNum;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete ACCOUNT because HISTORY exists.'
      );
    END IF;


-- ERwin Builtin Fri Nov 13 17:59:50 2020
END;
/

CREATE  TRIGGER tU_ACCOUNT AFTER UPDATE ON ACCOUNT for each row
-- ERwin Builtin Fri Nov 13 17:59:50 2020
-- UPDATE trigger on ACCOUNT 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
  /* ACCOUNT  HISTORY on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0001228b", PARENT_OWNER="", PARENT_TABLE="ACCOUNT"
    CHILD_OWNER="", CHILD_TABLE="HISTORY"
    P2C_VERB_PHRASE="R/2", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2", FK_COLUMNS="userId""userNum" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.userId <> :new.userId OR 
    :old.userNum <> :new.userNum
  THEN
    SELECT count(*) INTO NUMROWS
      FROM HISTORY
      WHERE
        /*  %JoinFKPK(HISTORY,:%Old," = "," AND") */
        HISTORY.userId = :old.userId AND
        HISTORY.userNum = :old.userNum;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update ACCOUNT because HISTORY exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Fri Nov 13 17:59:50 2020
END;
/


CREATE  TRIGGER tI_HISTORY BEFORE INSERT ON HISTORY for each row
-- ERwin Builtin Fri Nov 13 17:59:50 2020
-- INSERT trigger on HISTORY 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
    /* ACCOUNT  HISTORY on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0000fcf2", PARENT_OWNER="", PARENT_TABLE="ACCOUNT"
    CHILD_OWNER="", CHILD_TABLE="HISTORY"
    P2C_VERB_PHRASE="R/2", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2", FK_COLUMNS="userId""userNum" */
    SELECT count(*) INTO NUMROWS
      FROM ACCOUNT
      WHERE
        /* %JoinFKPK(:%New,ACCOUNT," = "," AND") */
        :new.userId = ACCOUNT.userId AND
        :new.userNum = ACCOUNT.userNum;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert HISTORY because ACCOUNT does not exist.'
      );
    END IF;


-- ERwin Builtin Fri Nov 13 17:59:50 2020
END;
/

CREATE  TRIGGER tD_HISTORY AFTER DELETE ON HISTORY for each row
-- ERwin Builtin Fri Nov 13 17:59:50 2020
-- DELETE trigger on HISTORY 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
    /* HISTORY  REVIEW on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0001c429", PARENT_OWNER="", PARENT_TABLE="HISTORY"
    CHILD_OWNER="", CHILD_TABLE="REVIEW"
    P2C_VERB_PHRASE="R/3", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_3", FK_COLUMNS="userId""userNum" */
    SELECT count(*) INTO NUMROWS
      FROM REVIEW
      WHERE
        /*  %JoinFKPK(REVIEW,:%Old," = "," AND") */
        REVIEW.userId = :old.userId AND
        REVIEW.userNum = :old.userNum;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete HISTORY because REVIEW exists.'
      );
    END IF;

    /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
    /* HISTORY  ORDER on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="HISTORY"
    CHILD_OWNER="", CHILD_TABLE="ORDER"
    P2C_VERB_PHRASE="R/13", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="userId""userNum" */
    UPDATE ORDER
      SET
        /* %SetFK(ORDER,NULL) */
        ORDER.userId = NULL,
        ORDER.userNum = NULL
      WHERE
        /* %JoinFKPK(ORDER,:%Old," = "," AND") */
        ORDER.userId = :old.userId AND
        ORDER.userNum = :old.userNum;


-- ERwin Builtin Fri Nov 13 17:59:50 2020
END;
/

CREATE  TRIGGER tU_HISTORY AFTER UPDATE ON HISTORY for each row
-- ERwin Builtin Fri Nov 13 17:59:50 2020
-- UPDATE trigger on HISTORY 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
  /* HISTORY  REVIEW on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000330cd", PARENT_OWNER="", PARENT_TABLE="HISTORY"
    CHILD_OWNER="", CHILD_TABLE="REVIEW"
    P2C_VERB_PHRASE="R/3", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_3", FK_COLUMNS="userId""userNum" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.userId <> :new.userId OR 
    :old.userNum <> :new.userNum
  THEN
    SELECT count(*) INTO NUMROWS
      FROM REVIEW
      WHERE
        /*  %JoinFKPK(REVIEW,:%Old," = "," AND") */
        REVIEW.userId = :old.userId AND
        REVIEW.userNum = :old.userNum;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update HISTORY because REVIEW exists.'
      );
    END IF;
  END IF;

  /* HISTORY  ORDER on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="HISTORY"
    CHILD_OWNER="", CHILD_TABLE="ORDER"
    P2C_VERB_PHRASE="R/13", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="userId""userNum" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.userId <> :new.userId OR 
    :old.userNum <> :new.userNum
  THEN
    UPDATE ORDER
      SET
        /* %SetFK(ORDER,NULL) */
        ORDER.userId = NULL,
        ORDER.userNum = NULL
      WHERE
        /* %JoinFKPK(ORDER,:%Old," = ",",") */
        ORDER.userId = :old.userId AND
        ORDER.userNum = :old.userNum;
  END IF;

  /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
  /* ACCOUNT  HISTORY on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ACCOUNT"
    CHILD_OWNER="", CHILD_TABLE="HISTORY"
    P2C_VERB_PHRASE="R/2", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2", FK_COLUMNS="userId""userNum" */
  SELECT count(*) INTO NUMROWS
    FROM ACCOUNT
    WHERE
      /* %JoinFKPK(:%New,ACCOUNT," = "," AND") */
      :new.userId = ACCOUNT.userId AND
      :new.userNum = ACCOUNT.userNum;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update HISTORY because ACCOUNT does not exist.'
    );
  END IF;


-- ERwin Builtin Fri Nov 13 17:59:50 2020
END;
/


CREATE  TRIGGER tD_ITEM AFTER DELETE ON ITEM for each row
-- ERwin Builtin Fri Nov 13 17:59:50 2020
-- DELETE trigger on ITEM 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
    /* ITEM  ORDER_ITEM_Detail on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0000ee64", PARENT_OWNER="", PARENT_TABLE="ITEM"
    CHILD_OWNER="", CHILD_TABLE="ORDER_ITEM_Detail"
    P2C_VERB_PHRASE="R/10", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_10", FK_COLUMNS="ItemNum" */
    SELECT count(*) INTO NUMROWS
      FROM ORDER_ITEM_Detail
      WHERE
        /*  %JoinFKPK(ORDER_ITEM_Detail,:%Old," = "," AND") */
        ORDER_ITEM_Detail.ItemNum = :old.ItemNum;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete ITEM because ORDER_ITEM_Detail exists.'
      );
    END IF;


-- ERwin Builtin Fri Nov 13 17:59:50 2020
END;
/

CREATE  TRIGGER tU_ITEM AFTER UPDATE ON ITEM for each row
-- ERwin Builtin Fri Nov 13 17:59:50 2020
-- UPDATE trigger on ITEM 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
  /* ITEM  ORDER_ITEM_Detail on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000119ce", PARENT_OWNER="", PARENT_TABLE="ITEM"
    CHILD_OWNER="", CHILD_TABLE="ORDER_ITEM_Detail"
    P2C_VERB_PHRASE="R/10", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_10", FK_COLUMNS="ItemNum" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ItemNum <> :new.ItemNum
  THEN
    SELECT count(*) INTO NUMROWS
      FROM ORDER_ITEM_Detail
      WHERE
        /*  %JoinFKPK(ORDER_ITEM_Detail,:%Old," = "," AND") */
        ORDER_ITEM_Detail.ItemNum = :old.ItemNum;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update ITEM because ORDER_ITEM_Detail exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin Fri Nov 13 17:59:50 2020
END;
/


CREATE  TRIGGER tI_ORDER BEFORE INSERT ON ORDER for each row
-- ERwin Builtin Fri Nov 13 17:59:50 2020
-- INSERT trigger on ORDER 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
    /* HISTORY  ORDER on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="0000f393", PARENT_OWNER="", PARENT_TABLE="HISTORY"
    CHILD_OWNER="", CHILD_TABLE="ORDER"
    P2C_VERB_PHRASE="R/13", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="userId""userNum" */
    UPDATE ORDER
      SET
        /* %SetFK(ORDER,NULL) */
        ORDER.userId = NULL,
        ORDER.userNum = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM HISTORY
            WHERE
              /* %JoinFKPK(:%New,HISTORY," = "," AND") */
              :new.userId = HISTORY.userId AND
              :new.userNum = HISTORY.userNum
        ) 
        /* %JoinPKPK(ORDER,:%New," = "," AND") */
         and ORDER.OrderNum = :new.OrderNum;


-- ERwin Builtin Fri Nov 13 17:59:50 2020
END;
/

CREATE  TRIGGER tD_ORDER AFTER DELETE ON ORDER for each row
-- ERwin Builtin Fri Nov 13 17:59:50 2020
-- DELETE trigger on ORDER 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
    /* ORDER  ORDER_ITEM_Detail on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0000eb23", PARENT_OWNER="", PARENT_TABLE="ORDER"
    CHILD_OWNER="", CHILD_TABLE="ORDER_ITEM_Detail"
    P2C_VERB_PHRASE="R/8", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_8", FK_COLUMNS="OrderNum" */
    SELECT count(*) INTO NUMROWS
      FROM ORDER_ITEM_Detail
      WHERE
        /*  %JoinFKPK(ORDER_ITEM_Detail,:%Old," = "," AND") */
        ORDER_ITEM_Detail.OrderNum = :old.OrderNum;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete ORDER because ORDER_ITEM_Detail exists.'
      );
    END IF;


-- ERwin Builtin Fri Nov 13 17:59:50 2020
END;
/

CREATE  TRIGGER tU_ORDER AFTER UPDATE ON ORDER for each row
-- ERwin Builtin Fri Nov 13 17:59:50 2020
-- UPDATE trigger on ORDER 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
  /* ORDER  ORDER_ITEM_Detail on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00022c82", PARENT_OWNER="", PARENT_TABLE="ORDER"
    CHILD_OWNER="", CHILD_TABLE="ORDER_ITEM_Detail"
    P2C_VERB_PHRASE="R/8", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_8", FK_COLUMNS="OrderNum" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.OrderNum <> :new.OrderNum
  THEN
    SELECT count(*) INTO NUMROWS
      FROM ORDER_ITEM_Detail
      WHERE
        /*  %JoinFKPK(ORDER_ITEM_Detail,:%Old," = "," AND") */
        ORDER_ITEM_Detail.OrderNum = :old.OrderNum;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update ORDER because ORDER_ITEM_Detail exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
  /* HISTORY  ORDER on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="HISTORY"
    CHILD_OWNER="", CHILD_TABLE="ORDER"
    P2C_VERB_PHRASE="R/13", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="userId""userNum" */
  SELECT count(*) INTO NUMROWS
    FROM HISTORY
    WHERE
      /* %JoinFKPK(:%New,HISTORY," = "," AND") */
      :new.userId = HISTORY.userId AND
      :new.userNum = HISTORY.userNum;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.userId IS NOT NULL AND
    :new.userNum IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update ORDER because HISTORY does not exist.'
    );
  END IF;


-- ERwin Builtin Fri Nov 13 17:59:50 2020
END;
/


CREATE  TRIGGER tI_ORDER_ITEM_Detail BEFORE INSERT ON ORDER_ITEM_Detail for each row
-- ERwin Builtin Fri Nov 13 17:59:50 2020
-- INSERT trigger on ORDER_ITEM_Detail 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
    /* ORDER  ORDER_ITEM_Detail on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0001f842", PARENT_OWNER="", PARENT_TABLE="ORDER"
    CHILD_OWNER="", CHILD_TABLE="ORDER_ITEM_Detail"
    P2C_VERB_PHRASE="R/8", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_8", FK_COLUMNS="OrderNum" */
    SELECT count(*) INTO NUMROWS
      FROM ORDER
      WHERE
        /* %JoinFKPK(:%New,ORDER," = "," AND") */
        :new.OrderNum = ORDER.OrderNum;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert ORDER_ITEM_Detail because ORDER does not exist.'
      );
    END IF;

    /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
    /* ITEM  ORDER_ITEM_Detail on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ITEM"
    CHILD_OWNER="", CHILD_TABLE="ORDER_ITEM_Detail"
    P2C_VERB_PHRASE="R/10", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_10", FK_COLUMNS="ItemNum" */
    SELECT count(*) INTO NUMROWS
      FROM ITEM
      WHERE
        /* %JoinFKPK(:%New,ITEM," = "," AND") */
        :new.ItemNum = ITEM.ItemNum;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert ORDER_ITEM_Detail because ITEM does not exist.'
      );
    END IF;


-- ERwin Builtin Fri Nov 13 17:59:50 2020
END;
/

CREATE  TRIGGER tU_ORDER_ITEM_Detail AFTER UPDATE ON ORDER_ITEM_Detail for each row
-- ERwin Builtin Fri Nov 13 17:59:50 2020
-- UPDATE trigger on ORDER_ITEM_Detail 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
  /* ORDER  ORDER_ITEM_Detail on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0001fa81", PARENT_OWNER="", PARENT_TABLE="ORDER"
    CHILD_OWNER="", CHILD_TABLE="ORDER_ITEM_Detail"
    P2C_VERB_PHRASE="R/8", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_8", FK_COLUMNS="OrderNum" */
  SELECT count(*) INTO NUMROWS
    FROM ORDER
    WHERE
      /* %JoinFKPK(:%New,ORDER," = "," AND") */
      :new.OrderNum = ORDER.OrderNum;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update ORDER_ITEM_Detail because ORDER does not exist.'
    );
  END IF;

  /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
  /* ITEM  ORDER_ITEM_Detail on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ITEM"
    CHILD_OWNER="", CHILD_TABLE="ORDER_ITEM_Detail"
    P2C_VERB_PHRASE="R/10", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_10", FK_COLUMNS="ItemNum" */
  SELECT count(*) INTO NUMROWS
    FROM ITEM
    WHERE
      /* %JoinFKPK(:%New,ITEM," = "," AND") */
      :new.ItemNum = ITEM.ItemNum;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update ORDER_ITEM_Detail because ITEM does not exist.'
    );
  END IF;


-- ERwin Builtin Fri Nov 13 17:59:50 2020
END;
/


CREATE  TRIGGER tI_REVIEW BEFORE INSERT ON REVIEW for each row
-- ERwin Builtin Fri Nov 13 17:59:50 2020
-- INSERT trigger on REVIEW 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
    /* HISTORY  REVIEW on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0000ebcc", PARENT_OWNER="", PARENT_TABLE="HISTORY"
    CHILD_OWNER="", CHILD_TABLE="REVIEW"
    P2C_VERB_PHRASE="R/3", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_3", FK_COLUMNS="userId""userNum" */
    SELECT count(*) INTO NUMROWS
      FROM HISTORY
      WHERE
        /* %JoinFKPK(:%New,HISTORY," = "," AND") */
        :new.userId = HISTORY.userId AND
        :new.userNum = HISTORY.userNum;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert REVIEW because HISTORY does not exist.'
      );
    END IF;


-- ERwin Builtin Fri Nov 13 17:59:50 2020
END;
/

CREATE  TRIGGER tU_REVIEW AFTER UPDATE ON REVIEW for each row
-- ERwin Builtin Fri Nov 13 17:59:50 2020
-- UPDATE trigger on REVIEW 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin Fri Nov 13 17:59:50 2020 */
  /* HISTORY  REVIEW on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0000f346", PARENT_OWNER="", PARENT_TABLE="HISTORY"
    CHILD_OWNER="", CHILD_TABLE="REVIEW"
    P2C_VERB_PHRASE="R/3", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_3", FK_COLUMNS="userId""userNum" */
  SELECT count(*) INTO NUMROWS
    FROM HISTORY
    WHERE
      /* %JoinFKPK(:%New,HISTORY," = "," AND") */
      :new.userId = HISTORY.userId AND
      :new.userNum = HISTORY.userNum;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update REVIEW because HISTORY does not exist.'
    );
  END IF;


-- ERwin Builtin Fri Nov 13 17:59:50 2020
END;
/

